// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Payment_Status {
  FAILED
  PAID
  PENDING
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  orders    Order[]
  Address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  imageUrl  String? // Cloudinary image URL
  publicId  String? // Cloudinary public ID for deletion
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Product {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Int
  quantity    Int
  brand       String?
  rating      String?
  size        String?
  color       String?
  discount    Int?
  images      ProductImage[] // Multiple images relation
  categoryId  String         @db.ObjectId
  category    Category       @relation(fields: [categoryId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ProductImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl  String // Cloudinary image URL
  publicId  String // Cloudinary public ID for deletion
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

type OrderItem {
  name      String
  qty       Int
  image     String?
  price     Int
  productId String  @db.ObjectId
}

type ShippingAddress {
  address    String
  city       String
  postalCode String
  country    String
}

model Order {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  orderItems      OrderItem[]
  shippingAddress ShippingAddress
  paymentMethod   String?
  isPaid          Boolean         @default(false)
  status          Payment_Status  @default(PENDING)
  paidAt          DateTime?
  totalPrice      Int
  userId          String          @db.ObjectId
  user            User            @relation(fields: [userId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  address    String
  city       String
  postalCode String
  country    String
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
